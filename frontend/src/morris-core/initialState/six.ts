import { GameState, Mill, StateGraph } from "morris-core/types";

// This state graph represents the adjacency for 6 man morris (2 rings)
// Initial state graph just defines adjacency. occupancy is omitted as there are no pieces to start
const initialStateGraph: StateGraph = {
  // inner ring
  a: { neighbors: ["b", "h"] },
  b: { neighbors: ["a", "c", "j"] },
  c: { neighbors: ["b", "d"] },
  d: { neighbors: ["c", "e", "l"] },
  e: { neighbors: ["d", "f"] },
  f: { neighbors: ["e", "g", "n"] },
  g: { neighbors: ["f", "h"] },
  h: { neighbors: ["g", "a", "p"] },

  // outer ring
  i: { neighbors: ["j", "p"] },
  j: { neighbors: ["i", "k", "b"] },
  k: { neighbors: ["j", "l"] },
  l: { neighbors: ["k", "m", "d"] },
  m: { neighbors: ["l", "n"] },
  n: { neighbors: ["m", "o", "f"] },
  o: { neighbors: ["n", "p"] },
  p: { neighbors: ["o", "i", "h"] },
};

// These represent the "lines" which a mill must be formed on. They could be autogenerated with a simple formula
// The advantage of storing this separately from the state graph is that it gives us flexibility in what makes a mill line.
const initialMills: Mill[] = [
  // inner ring
  { points: ["a", "b", "c"] },
  { points: ["c", "d", "e"] },
  { points: ["e", "f", "g"] },
  { points: ["g", "h", "a"] },

  // outer ring
  { points: ["i", "j", "k"] },
  { points: ["k", "l", "m"] },
  { points: ["m", "n", "o"] },
  { points: ["o", "p", "i"] },
];

/**
 * Initial state of the game for 6 man morris
 */
export const initialStateSix: GameState = {
  phase: 1,
  turn: { count: 0, player: "a", type: "regular" },
  stateGraph: initialStateGraph,
  remainingMen: { a: 6, b: 6 },
  mills: initialMills,
  winner: undefined,
  nextMoves: Object.keys(initialStateGraph), // On turn 0, first player can move anywhere
};
